name: Rust Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: arm64
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            arch: amd64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: arm64
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            ui/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install UI dependencies
        run: yarn install
        working-directory: ui

      - name: Build UI
        run: yarn build
        working-directory: ui

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install required packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Install target
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename artifact
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv target/${{ matrix.target }}/release/onelist.exe target/${{ matrix.target }}/release/onelist-${{ matrix.target }}.exe
          else
            mv target/${{ matrix.target }}/release/onelist target/${{ matrix.target }}/release/onelist-${{ matrix.target }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: onelist-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/onelist-${{ matrix.target }}*
